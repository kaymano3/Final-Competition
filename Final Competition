//declare the necessary libraries
#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
#include <FEHServo.h>
//Declarations for encoders & motors
DigitalEncoder right_encoder(FEHIO::P0_0);
DigitalEncoder left_encoder(FEHIO::P2_7);
FEHMotor right_motor(FEHMotor::Motor1,9.0);
FEHMotor left_motor(FEHMotor::Motor0,9.0);
AnalogInputPin cds (FEHIO::P1_7);
FEHServo robot_arm(FEHServo::Servo0);
//This is a move forward function used for the majority of the code
//includes a time-out of 5.5 seconds
void move_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
   float t_now=TimeNow();
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts && TimeNow()-t_now<5.5);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
//a time-out cannot be used for running into the button for 5 seconds, so this function
//is a move forward function without the time-out
void move_forwarddance(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
   float t_now=TimeNow();
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
//This function is the move forward into the foosball. It allows for the right and left
//motors to be set at different percentages and times out at 10 seconds.
void move_forwardfoos(int leftPercent, int rightPercent, int counts)
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(rightPercent);
    left_motor.SetPercent(leftPercent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
   float t_now=TimeNow();
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts && TimeNow()-t_now<10.0);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
//this is our turn function. The time out is 3 seconds.
void turn(int leftPercent, int rightPercent, int counts) {
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(rightPercent);
    left_motor.SetPercent(leftPercent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    float t_now=TimeNow();
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts && TimeNow()-t_now<3.0);
    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
//This is our function to turn into the foosball. Sometimes our robot would get caught in the foosball mechanism
//so there is a while loop inside of here that would be call if the robot is stuck for 2 seconds that would allow
//the robot to get unstuck by backing up and moving forward at small increments
void turnfoos(int leftPercent, int rightPercent, int counts) {
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(rightPercent);
    left_motor.SetPercent(leftPercent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    float t_now=TimeNow();
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts && TimeNow()-t_now<3.0);
    LCD.WriteLine("We got here");
    if(TimeNow()-t_now>=2.0){
        LCD.WriteLine("We also got here");
        int n=0;
        while( n< 6){
       leftPercent=-15;
       rightPercent=0;
      counts=4;
      move_forwardfoos(leftPercent,rightPercent,counts);
      LCD.WriteLine("Here as well");
      leftPercent=0;
      rightPercent=70;
     counts=4;
     move_forwardfoos(leftPercent,rightPercent,counts);
     LCD.WriteLine("Here");
      n++;
        }
        int k=0;
        while( k< 6){
       leftPercent=-15;
       rightPercent=0;
      counts=4;
      move_forwardfoos(leftPercent,rightPercent,counts);
      LCD.WriteLine("Here as well");
      leftPercent=0;
      rightPercent=50;
     counts=4;
     move_forwardfoos(leftPercent,rightPercent,counts);
     LCD.WriteLine("Here");
      k++;
        }
    }
    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
//This is our function for dropping the token into the bottom basket.
void tokencomp(int leftPercent, int rightPercent, int motor_percent, int expected_counts){
    //move forward for about 6 inches
    expected_counts=220;
    motor_percent=25;
    move_forward(motor_percent,expected_counts);
    //turn 45 degrees to the left
    expected_counts=100;
    leftPercent=0;
    rightPercent=25;
    turn(leftPercent,rightPercent,expected_counts);
    //move forward for about 7 inches
    expected_counts=250;
    move_forward(motor_percent,expected_counts);
    //open claw
    robot_arm.SetDegree(100);
    //move backward for about 5 inches
    motor_percent=-25;
    expected_counts=195;
    move_forward(motor_percent,expected_counts);
}
//This is our function for the dance dance buttons and navigating to the foosball.
void dancecomp(int leftPercent, int rightPercent, int motor_percent, int expected_counts){
   //backward right turn
    rightPercent=0;
     leftPercent=-25;
     expected_counts=234;
     turn(leftPercent,rightPercent,expected_counts);
     //move backward to hover over the light
     expected_counts=330;
     motor_percent=-25;
     move_forward(motor_percent,expected_counts);
     LCD.WriteLine("The CDS Value is:");
     LCD.Write(cds.Value());
    if(cds.Value()<1){
        //display to the screen what the light is read as
        LCD.WriteLine("The light is red");
        //turn right
        leftPercent=25;
        rightPercent=0;
        expected_counts=220;
        turn(leftPercent,rightPercent,expected_counts);
        //run into the light for 5 seconds with no time
        motor_percent=-25;
        expected_counts=900;
        move_forwarddance(motor_percent,expected_counts);
        //move forward for a small amount to release the button
        expected_counts=60;
        motor_percent=25;
        move_forward(motor_percent,expected_counts);
        //90 degree turn to the left
        leftPercent=0;
        rightPercent=25;
        expected_counts=220;
        turn(leftPercent,rightPercent,expected_counts);
        //move backward for about 13 inches
        motor_percent=-25;
        expected_counts=500;
        move_forward(motor_percent,expected_counts);
        //turn left for 90 degrees
        rightPercent=0;
        leftPercent=25;
        expected_counts=220;
        turn(leftPercent,rightPercent,expected_counts);
        //move backward to decrease friction for a touch
        motor_percent=-25;
        expected_counts=175;
        move_forward(motor_percent,expected_counts);
        //move up the ramp at equal percentages
        leftPercent=71;
        rightPercent=70;
        expected_counts=1000;
        move_forwardfoos(leftPercent,rightPercent,expected_counts);
        //move with left slight more once on the second level
        leftPercent=28;
        rightPercent=25;
        expected_counts=760;
        move_forwardfoos(leftPercent,rightPercent,expected_counts);

    }
    else if(cds.Value()>1){
        //display that the light is blue
        LCD.WriteLine("The light is blue");
        //move backward for about 7 inches
        motor_percent=-25;
        expected_counts=250;
        move_forward(motor_percent,expected_counts);
        //right turn for a slighlty alrger than 90 degrees
        rightPercent=0;
        leftPercent=25;
        expected_counts=234;
        turn(leftPercent,rightPercent,expected_counts);
        //run into button for 5 seconds without lack of timer
     expected_counts = 1200;
     motor_percent = -25;
     move_forwarddance(motor_percent,expected_counts);
     //move up the ramp at equal percentages
     leftPercent=70;
     rightPercent=70;
     expected_counts=1200;
     move_forwardfoos(leftPercent,rightPercent,expected_counts);
     //move forward with more at the left to reach the black foosball box
     leftPercent=28;
     rightPercent=25;
     expected_counts=660;
     move_forwardfoos(leftPercent,rightPercent,expected_counts);
    }

}

//This is our function for the foosball
void foosballcomp(int leftPercent,int rightPercent, int motor_percent, int expected_counts){
    //move backward for about 6 inches
    expected_counts=200;
    motor_percent=-25;
    move_forward(motor_percent,expected_counts);
    //turn left for about 30 degrees
    expected_counts=77.22;
    leftPercent=0;
    rightPercent=25;
    turn(leftPercent,rightPercent,expected_counts);
    //move forward for 4 inches
    expected_counts=125;
    motor_percent=25;
    move_forward(motor_percent,expected_counts);
    //turn slightly into the foosball, pushing it forward
    expected_counts=35;
    leftPercent=0;
    rightPercent=80;
    turnfoos(leftPercent,rightPercent,expected_counts);
    //move backward for about 5 inches
    expected_counts=200;
    motor_percent=-25;
    move_forward(motor_percent,expected_counts);
    //backwards right turn for about 45 degrees
    expected_counts=115;
    leftPercent=-25;
    rightPercent=0;
    turn(leftPercent,rightPercent,expected_counts);

}
//This is our function for navigating to the lever and moving it down.
void levercomp(int leftPercent, int rightPercent, int motor_percent, int expected_counts){
  //move forward very slightly to square with the wall
  expected_counts=10;
  motor_percent=25;
  move_forward(motor_percent,expected_counts);
  //left turn for about 30 degrees
  leftPercent=0;
  rightPercent=25;
  expected_counts=90;
  turn(leftPercent,rightPercent,expected_counts);
  //move forward for around 1.5 feet
  expected_counts=630;
  motor_percent=25;
  move_forward(motor_percent,expected_counts);
  //right turn for around 90 degrees
  leftPercent=25;
  rightPercent=0;
  expected_counts=234;
  turn(leftPercent,rightPercent,expected_counts);
  //move forward with more power for the left motor
  //to go around the orb
  leftPercent=23;
  rightPercent=18;
  expected_counts=470;
  move_forwardfoos(leftPercent,rightPercent,expected_counts);
  //move backwards slightly to get unstuck from claw machine
  motor_percent=-25;
   expected_counts=20;
  move_forward(motor_percent,expected_counts);
  //loop to move lever down
  //initialize a counter variable
  int n=0;
  //while n is less than 2
  while(n<2){
      //turn right for a small amount
      leftPercent=25;
      rightPercent=0;
      expected_counts=30;
      turn(leftPercent,rightPercent,expected_counts);
      //turn left backwards for a really small amount
      rightPercent=-25;
      leftPercent=0;
      expected_counts=5;
      turn(leftPercent,rightPercent,expected_counts);
      //add one to n
      n++;
  }
  //move backward at different percents to get unstuck from the claw machine
  leftPercent=-40;
  rightPercent=-25;
  expected_counts=100;
  move_forward(motor_percent,expected_counts);
  //backwards left 90 degree turn
  rightPercent=-25;
  leftPercent=0;
  expected_counts=234;
  turn(leftPercent,rightPercent,expected_counts);
  //move backwards a small amount to square with the wall
  motor_percent=-25;
  expected_counts=50;
  move_forward(motor_percent,expected_counts);
  //90 degree right turn to face the ramp
  leftPercent=25;
  rightPercent=0;
  expected_counts=224;
  turn(leftPercent,rightPercent,expected_counts);
  //go down the ramp
  motor_percent=50;
  expected_counts=800;
  move_forward(motor_percent,expected_counts);
  //move forward with more power to the right motor
  //to avoid getting stuck to the wall
  leftPercent=20;
  rightPercent=32;
  expected_counts=400;
  move_forwardfoos(leftPercent,rightPercent,expected_counts);
  //90 degree left turn
  rightPercent=50;
  leftPercent=0;
  expected_counts=214;
  turn(leftPercent,rightPercent,expected_counts);
  //back into the final button
  motor_percent=-50;
  expected_counts=600;
  move_forward(motor_percent,expected_counts);
}

//Our function for the order the functions will be called.
void adjustedComp(int leftPercent, int rightPercent, int expected_counts, int motor_percent){
    //call the tokencomp function
    tokencomp(leftPercent,rightPercent, motor_percent,expected_counts);
    //call the dancecomp function
     dancecomp(leftPercent,rightPercent, motor_percent,expected_counts);
     //call the foosballcomp function
     foosballcomp(leftPercent,rightPercent,motor_percent,expected_counts);
     //call the levercomp function
     levercomp(leftPercent,rightPercent,motor_percent,expected_counts);
}

int main(void)
{
    float touch_x,touch_y;
  float heading=RPS.Heading();
  float xvalue=RPS.X(), yvalue=RPS.Y();
  RPS.InitializeTouchMenu();
  int motor_percent = 25; //Input power level here
  int expected_counts =72 ; //Input theoretical counts here
  int leftPercent=0;
  int rightPercent=25;
  robot_arm.SetMax(1908);
  robot_arm.SetMin(500);
  float x, y; //for touch screen
  robot_arm.SetDegree(0); //opens claw
  Sleep(3.0);
 robot_arm.SetDegree(165);//closes claw
  //Initialize the screen
  LCD.Clear(BLACK);
  LCD.SetFontColor(WHITE);
  LCD.WriteLine("The CDS Value is:");
  LCD.Write(cds.Value());
 //LCD.WriteLine("Touch the screen");
//while(!LCD.Touch(&x,&y)); //Wait for screen to be pressed
//   while(LCD.Touch(&x,&y));
  while(true){//Wait for screen to be unpressed
 if(cds.Value()<1){
  adjustedComp(leftPercent, rightPercent, motor_percent, expected_counts);
  }
}
}


